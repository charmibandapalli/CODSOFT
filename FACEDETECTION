import cv2
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk

class FaceFinderApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Face Detector üòé")
        self.master.geometry("700x600")
        self.master.configure(bg="#1e1e2f")

        # GUI Title
        self.title = tk.Label(master, text="Face Detection App",
                              font=("Segoe UI", 18, "bold"), bg="#1e1e2f", fg="#4e4efc")
        self.title.pack(pady=20)

        # Where image shows up
        self.img_label = tk.Label(master, bg="#f2f2f2", relief="ridge", borderwidth=2)
        self.img_label.pack(pady=10)

        # Select Image button
        self.pick_btn = tk.Button(master, text="üìÅ Choose Image", font=("Segoe UI", 12, "bold"),
                                  bg="#4e4efc", fg="white", width=20, command=self.choose_image)
        self.pick_btn.pack(pady=10)

        # Detect Faces button (initially disabled)
        self.run_btn = tk.Button(master, text="üòé Run Detection", font=("Segoe UI", 12, "bold"),
                                 bg="#00c896", fg="white", width=20, state="disabled", command=self.detect_faces)
        self.run_btn.pack(pady=5)

        # Pre-trained face detection model
        haar_path = cv2.data.haarcascades + 'haarcascade_frontalface_default.xml'
        self.detector = cv2.CascadeClassifier(haar_path)
        self.orig_img = None

    def choose_image(self):
        filetypes = [("Image files", "*.png *.jpg *.jpeg")]
        img_path = filedialog.askopenfilename(title="Select a Photo", filetypes=filetypes)
        if img_path:
            self.orig_img = cv2.imread(img_path)
            self._display_img(self.orig_img)
            self.run_btn.config(state="normal")

    def _display_img(self, img):
        rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        resized = cv2.resize(rgb, (500, 400))
        pil_img = Image.fromarray(resized)
        self.tk_img = ImageTk.PhotoImage(pil_img)
        self.img_label.configure(image=self.tk_img)
        self.img_label.image = self.tk_img

    def detect_faces(self):
        if self.orig_img is None:
            messagebox.showwarning("Oops!", "No image loaded yet.")
            return

        # Convert to grayscale for face detection
        gray = cv2.cvtColor(self.orig_img, cv2.COLOR_BGR2GRAY)
        found = self.detector.detectMultiScale(gray, 1.1, 5, minSize=(30, 30))

        # Draw green rectangles on faces
        for (x, y, w, h) in found:
            cv2.rectangle(self.orig_img, (x, y), (x+w, y+h), (0, 255, 0), 2)

        if not found.any():
            messagebox.showinfo("Result", "Zero faces found, maybe try another picture?")
        else:
            messagebox.showinfo("Result", f"{len(found)} face(s) detected!")

        self._display_img(self.orig_img)

# Launch it!
if __name__ == '__main__':
    root = tk.Tk()
    app = FaceFinderApp(root)
    root.mainloop()
