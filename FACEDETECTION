import cv2
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk

class FaceDetectionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üîç Face Detection App")
        self.root.geometry("700x600")
        self.root.configure(bg="#1e1e2f")

        # Title
        self.title_label = tk.Label(root, text="Face Detection", 
                                    font=("Segoe UI", 18, "bold"), bg="#1e1e2f", fg="#4e4efc")
        self.title_label.pack(pady=20)

        # Canvas for image display
        self.canvas = tk.Label(root, bg="#f2f2f2", borderwidth=2, relief="ridge")
        self.canvas.pack(pady=10)

        # Buttons
        self.select_btn = tk.Button(root, text="Select Image üìÅ", font=("Segoe UI", 12, "bold"),
                                    command=self.load_image, bg="#4e4efc", fg="white", width=20)
        self.select_btn.pack(pady=10)

        self.detect_btn = tk.Button(root, text="Detect Faces üòé", font=("Segoe UI", 12, "bold"),
                                    command=self.detect_faces, bg="#00c896", fg="white", width=20, state="disabled")
        self.detect_btn.pack(pady=5)

        # Load Haar cascade model
        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        self.cv_img = None  # OpenCV image

    def load_image(self):
        file_path = filedialog.askopenfilename(title="Select Image", 
                                               filetypes=[("Image Files", "*.jpg *.png *.jpeg")])
        if file_path:
            self.cv_img = cv2.imread(file_path)
            self.show_image(self.cv_img)
            self.detect_btn.config(state="normal")

    def show_image(self, img):
        # Resize for display
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img_rgb = cv2.resize(img_rgb, (500, 400))
        img_pil = Image.fromarray(img_rgb)
        img_tk = ImageTk.PhotoImage(img_pil)
        self.canvas.configure(image=img_tk)
        self.canvas.image = img_tk

    def detect_faces(self):
        if self.cv_img is None:
            messagebox.showwarning("No image", "Please select an image first.")
            return

        gray = cv2.cvtColor(self.cv_img, cv2.COLOR_BGR2GRAY)
        faces = self.face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        for (x, y, w, h) in faces:
            cv2.rectangle(self.cv_img, (x, y), (x+w, y+h), (0, 255, 0), 2)

        if len(faces) == 0:
            messagebox.showinfo("Result", "No faces found.")
        else:
            messagebox.showinfo("Result", f"{len(faces)} face(s) detected!")

        self.show_image(self.cv_img)

# Run the GUI
if __name__ == "__main__":
    root = tk.Tk()
    app = FaceDetectionApp(root)
    root.mainloop()

