import tkinter as tk
from tkinter import messagebox

class TicTacToe:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Tic Tac Toe - VS AI 🤖")
        self.window.geometry("400x480")
        self.window.resizable(False, False)
        self.window.configure(bg="#1e1e2f")

        self.board = ['' for _ in range(9)]
        self.buttons = []
        self.current_player = 'X'  # Human = X, AI = O

        self.create_widgets()
        self.window.mainloop()

    def create_widgets(self):
        # Title (Updated)
        self.title_label = tk.Label(self.window, text="Tic Tac Toe", font=("Segoe UI", 20, "bold"),
                                    bg="#1e1e2f", fg="#4e4efc", pady=10)
        self.title_label.pack()

        # Status Label
        self.status = tk.Label(self.window, text="You are X. Your move!", font=("Segoe UI", 12),
                               bg="#1e1e2f", fg="white")
        self.status.pack()

        # Board Frame
        board_frame = tk.Frame(self.window, bg="#1e1e2f")
        board_frame.pack(pady=20)

        for i in range(9):
            btn = tk.Button(board_frame, text='', font=("Segoe UI", 22, "bold"), width=5, height=2,
                            bg="#f4f4fb", fg="#1e1e2f",
                            activebackground="#cddafd", relief="groove",
                            command=lambda i=i: self.on_click(i))
            btn.grid(row=i // 3, column=i % 3, padx=5, pady=5)
            self.buttons.append(btn)

        # Reset Button
        self.reset_btn = tk.Button(self.window, text="Reset Game 🔄", font=("Segoe UI", 11, "bold"),
                                   bg="#4e4efc", fg="white", activebackground="#3d3df0",
                                   relief="raised", command=self.reset_game)
        self.reset_btn.pack(pady=10)

    def on_click(self, index):
        if self.board[index] == '' and self.current_player == 'X':
            self.board[index] = 'X'
            self.buttons[index].config(text='X', state='disabled', disabledforeground="#0055ff")
            winner = self.check_winner(self.board)
            if winner or '' not in self.board:
                self.end_game(winner)
                return
            self.current_player = 'O'
            self.status.config(text="AI is thinking... 🤔")
            self.window.after(500, self.ai_move)

    def ai_move(self):
        best_score = float('-inf')
        best_move = None
        for i in range(9):
            if self.board[i] == '':
                self.board[i] = 'O'
                score = self.minimax(self.board, False)
                self.board[i] = ''
                if score > best_score:
                    best_score = score
                    best_move = i
        if best_move is not None:
            self.board[best_move] = 'O'
            self.buttons[best_move].config(text='O', state='disabled', disabledforeground="#ff2e63")
        winner = self.check_winner(self.board)
        if winner or '' not in self.board:
            self.end_game(winner)
        else:
            self.current_player = 'X'
            self.status.config(text="Your turn!")

    def minimax(self, board, is_maximizing):
        winner = self.check_winner(board)
        if winner == 'X': return -1
        if winner == 'O': return 1
        if '' not in board: return 0

        if is_maximizing:
            best_score = float('-inf')
            for i in range(9):
                if board[i] == '':
                    board[i] = 'O'
                    score = self.minimax(board, False)
                    board[i] = ''
                    best_score = max(score, best_score)
            return best_score
        else:
            best_score = float('inf')
            for i in range(9):
                if board[i] == '':
                    board[i] = 'X'
                    score = self.minimax(board, True)
                    board[i] = ''
                    best_score = min(score, best_score)
            return best_score

    def check_winner(self, board):
        combos = [(0,1,2), (3,4,5), (6,7,8),
                  (0,3,6), (1,4,7), (2,5,8),
                  (0,4,8), (2,4,6)]
        for x, y, z in combos:
            if board[x] == board[y] == board[z] != '':
                return board[x]
        return None

    def end_game(self, winner):
        if winner == 'X':
            self.status.config(text="🎉 You win!")
            messagebox.showinfo("Game Over", "You win! 🎉")
        elif winner == 'O':
            self.status.config(text="😔 AI wins.")
            messagebox.showinfo("Game Over", "AI wins! 😔")
        else:
            self.status.config(text="It's a draw!")
            messagebox.showinfo("Game Over", "It's a draw! 🤝")
        for btn in self.buttons:
            btn.config(state='disabled')

    def reset_game(self):
        self.board = ['' for _ in range(9)]
        self.current_player = 'X'
        for btn in self.buttons:
            btn.config(text='', state='normal')
        self.status.config(text="You are X. Your move!")

# Run the game
TicTacToe()
