import tkinter as tk
from tkinter import messagebox

class TicTacToeGame:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Tic Tac Toe - VS AI 🤖")
        self.root.geometry("400x480")
        self.root.configure(bg="#1e1e2f")
        self.root.resizable(False, False)

        self.cells = [''] * 9  # Empty board
        self.btns = []
        self.turn = 'X'  # Human starts

        self.build_ui()
        self.root.mainloop()

    def build_ui(self):
        # Game title
        tk.Label(self.root, text="Tic Tac Toe", font=("Segoe UI", 20, "bold"),
                 bg="#1e1e2f", fg="#4e4efc").pack(pady=10)

        # Status message
        self.status_lbl = tk.Label(self.root, text="You're X! Go ahead.",
                                   font=("Segoe UI", 12), bg="#1e1e2f", fg="white")
        self.status_lbl.pack()

        board_frame = tk.Frame(self.root, bg="#1e1e2f")
        board_frame.pack(pady=20)

        for i in range(9):
            b = tk.Button(board_frame, text='', width=5, height=2,
                          font=("Segoe UI", 22, "bold"),
                          bg="#f4f4fb", fg="#1e1e2f",
                          activebackground="#cddafd", relief="groove",
                          command=lambda idx=i: self.cell_clicked(idx))
            b.grid(row=i // 3, column=i % 3, padx=5, pady=5)
            self.btns.append(b)

        # Reset Game
        tk.Button(self.root, text="Reset 🔄", font=("Segoe UI", 11, "bold"),
                  bg="#4e4efc", fg="white", activebackground="#3d3df0",
                  command=self.reset_game).pack(pady=10)

    def cell_clicked(self, idx):
        if self.cells[idx] or self.turn != 'X':
            return
        self.cells[idx] = 'X'
        self.btns[idx].config(text='X', state='disabled', disabledforeground="#0055ff")

        result = self.get_winner(self.cells)
        if result or '' not in self.cells:
            self.end_game(result)
            return

        self.turn = 'O'
        self.status_lbl.config(text="Let me think... 🤖")
        self.root.after(500, self.ai_turn)

    def ai_turn(self):
        move = self.find_best_move()
        if move is not None:
            self.cells[move] = 'O'
            self.btns[move].config(text='O', state='disabled', disabledforeground="#ff2e63")

        result = self.get_winner(self.cells)
        if result or '' not in self.cells:
            self.end_game(result)
        else:
            self.turn = 'X'
            self.status_lbl.config(text="Your move!")

    def find_best_move(self):
        best_val = float('-inf')
        best_idx = None
        for i in range(9):
            if self.cells[i] == '':
                self.cells[i] = 'O'
                score = self.minimax(self.cells, False)
                self.cells[i] = ''
                if score > best_val:
                    best_val = score
                    best_idx = i
        return best_idx

    def minimax(self, state, maximizing):
        winner = self.get_winner(state)
        if winner == 'X': return -1
        if winner == 'O': return 1
        if '' not in state: return 0

        if maximizing:
            val = float('-inf')
            for i in range(9):
                if state[i] == '':
                    state[i] = 'O'
                    val = max(val, self.minimax(state, False))
                    state[i] = ''
            return val
        else:
            val = float('inf')
            for i in range(9):
                if state[i] == '':
                    state[i] = 'X'
                    val = min(val, self.minimax(state, True))
                    state[i] = ''
            return val

    def get_winner(self, state):
        combos = [(0,1,2), (3,4,5), (6,7,8),
                  (0,3,6), (1,4,7), (2,5,8),
                  (0,4,8), (2,4,6)]
        for a, b, c in combos:
            if state[a] == state[b] == state[c] and state[a]:
                return state[a]
        return None

    def end_game(self, result):
        msg = {"X": "🎉 You win!", "O": "😔 AI wins.", None: "🤝 It's a draw!"}
        self.status_lbl.config(text=msg[result])
        messagebox.showinfo("Game Over", msg[result])
        for b in self.btns:
            b.config(state='disabled')

    def reset_game(self):
        self.cells = [''] * 9
        self.turn = 'X'
        for b in self.btns:
            b.config(text='', state='normal')
        self.status_lbl.config(text="You're X! Go ahead.")

# Let’s roll
TicTacToeGame()
