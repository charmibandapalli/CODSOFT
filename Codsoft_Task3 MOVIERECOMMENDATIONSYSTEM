import tkinter as tk
from tkinter import ttk, messagebox

class HumanizedMovieRecommenderGUI:
    def __init__(self, master):
        self.master = master
        master.title("üçø Your Movie Companion üåü") # More inviting title
        master.geometry("950x750") # Slightly larger window for more space
        master.resizable(True, True) # Allow resizing

        # --- 1. Apply a Modern Tkinter Theme and Custom Styles ---
        self.style = ttk.Style()
        self.style.theme_use('clam') # 'clam' often provides a good base for customization

        # --- 2. Humanized Color Palette & Font Styles ---
        # Softer backgrounds
        self.style.configure('TFrame', background='#F8F8F8') # Very light, almost white gray
        self.style.configure('TLabel', background='#F8F8F8', foreground='#4A4A4A', font=('Verdana', 11)) # Softer text color

        # Action button style
        self.style.configure('TButton', font=('Arial', 12, 'bold'), background='#6495ED', foreground='white', borderwidth=0) # CornflowerBlue, no border
        self.style.map('TButton', background=[('active', '#5A88E0')]) # Darker blue on hover
        self.style.configure('TEntry', fieldbackground='#ffffff', foreground='#333333', font=('Arial', 12))

        # Text area where recommendations appear
        self.style.configure('Text', background='#FFFFFF', foreground='#333333', font=('Georgia', 12), borderwidth=0, relief="flat") # Classic, readable font

        # Main frame to hold everything for better padding/styling
        self.main_frame = ttk.Frame(master, padding="30 30 30 30", style='TFrame')
        self.main_frame.pack(fill=tk.BOTH, expand=True)

        # Configure columns and rows of the main frame to expand beautifully
        self.main_frame.grid_columnconfigure(0, weight=1)
        self.main_frame.grid_rowconfigure(0, weight=0) # Title
        self.main_frame.grid_rowconfigure(1, weight=0) # Input/Button
        self.main_frame.grid_rowconfigure(2, weight=1) # Output (will expand)
        self.main_frame.grid_rowconfigure(3, weight=0) # Footer/Closing message

        self.movies_data = self.load_data()
        self.movie_titles = {movie['title'].lower(): movie for movie in self.movies_data} # For quick lookup

        self.create_widgets()
        self.display_welcome_and_movies() # A friendlier initial display

    def load_data(self):
        """
        Loads the movie data. Hardcoded as per the requirement to avoid external libraries.
        """
        data = [
            {"title": "The Shawshank Redemption", "genres": "Drama"},
            {"title": "The Dark Knight", "genres": "Action, Crime, Drama"},
            {"title": "Pulp Fiction", "genres": "Crime, Drama"},
            {"title": "Forrest Gump", "genres": "Drama, Romance"},
            {"title": "Inception", "genres": "Action, Adventure, Sci-Fi"},
            {"title": "Interstellar", "genres": "Adventure, Drama, Sci-Fi"},
            {"title": "The Matrix", "genres": "Action, Sci-Fi"},
            {"title": "Spirited Away", "genres": "Animation, Adventure, Family"},
            {"title": "Lion King", "genres": "Animation, Adventure, Family"},
            {"title": "Toy Story", "genres": "Animation, Adventure, Comedy"},
            {"title": "Avatar", "genres": "Sci-Fi, Adventure, Fantasy"},
            {"title": "Titanic", "genres": "Romance, Drama"},
            {"title": "Jurassic Park", "genres": "Adventure, Sci-Fi"},
            {"title": "Goodfellas", "genres": "Crime, Drama"},
            {"title": "Fight Club", "genres": "Drama, Thriller"}
        ]
        return data

    def create_widgets(self):
        """
        Sets up the GUI elements with improved styling and conversational language.
        """
        # --- Title Section ---
        self.title_label = ttk.Label(self.main_frame, text="üé¨ Your Personal Movie Companion! üåü",
                                     font=("Segoe UI", 26, "bold"), foreground='#483D8B', background='#F8F8F8') # Deep purple
        self.title_label.grid(row=0, column=0, columnspan=2, pady=(10, 30), sticky="n")

        # --- Input Section (More conversational prompt) ---
        input_frame = ttk.Frame(self.main_frame, padding="20 20 20 20", relief="raised", borderwidth=1, style='TFrame') # Raised effect
        input_frame.grid(row=1, column=0, columnspan=2, pady=15, sticky="ew")
        input_frame.grid_columnconfigure(0, weight=0) # Label
        input_frame.grid_columnconfigure(1, weight=1) # Entry field (expands)
        input_frame.grid_columnconfigure(2, weight=0) # Button

        self.movie_label = ttk.Label(input_frame, text="What movie are you in the mood for?", font=('Verdana', 13, 'bold'))
        self.movie_label.grid(row=0, column=0, padx=(10, 20), pady=10, sticky="w")

        self.movie_entry = ttk.Entry(input_frame, width=40, font=('Verdana', 13))
        self.movie_entry.grid(row=0, column=1, padx=5, pady=10, sticky="ew")
        self.movie_entry.bind("<Return>", self.get_recommendations_event) # Allow Enter key

        self.recommend_button = ttk.Button(input_frame, text="Find My Next Movie! ‚ú®", command=self.get_recommendations_gui,
                                           cursor="hand2") # More engaging button text
        self.recommend_button.grid(row=0, column=2, padx=(20, 10), pady=10)

        # --- Output Section (Friendlier display area) ---
        output_frame = ttk.Frame(self.main_frame, padding="20 20 20 20", relief="sunken", borderwidth=1, style='TFrame')
        output_frame.grid(row=2, column=0, columnspan=2, sticky="nsew", pady=(15, 0)) # Sticky fills available space
        output_frame.grid_rowconfigure(0, weight=0) # Label
        output_frame.grid_rowconfigure(1, weight=1) # Text area (expands)
        output_frame.grid_columnconfigure(0, weight=1) # Text area

        self.output_label = ttk.Label(output_frame, text="Your Personalized Suggestions Await!", font=('Segoe UI', 15, 'bold'), foreground='#2E8B57') # Calming green
        self.output_label.grid(row=0, column=0, pady=(5, 15), sticky="nw")

        self.recommendation_text = tk.Text(output_frame, wrap=tk.WORD, height=15, width=70, font=('Georgia', 12),
                                           relief="flat", borderwidth=0, padx=15, pady=15, bg='#FFFFFF') # Clean, spacious text area
        self.recommendation_text.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)

        # Scrollbar for the text output
        scrollbar = ttk.Scrollbar(output_frame, command=self.recommendation_text.yview)
        scrollbar.grid(row=1, column=1, sticky='ns')
        self.recommendation_text.config(yscrollcommand=scrollbar.set)

        # --- Footer/Closing Message ---
        self.footer_label = ttk.Label(self.main_frame, text="Happy Watching! Enjoy your cinematic journey. üçø",
                                      font=("Verdana", 10, "italic"), foreground='#666666', background='#F8F8F8')
        self.footer_label.grid(row=3, column=0, columnspan=2, pady=(20, 10))


    def display_welcome_and_movies(self):
        """Displays a friendly welcome message and the list of available movies."""
        self.recommendation_text.delete(1.0, tk.END) # Clear previous text
        self.recommendation_text.insert(tk.END, "üëã Welcome, movie explorer!\n\n")
        self.recommendation_text.insert(tk.END, "I'm here to help you find your next great watch.\n\n")
        self.recommendation_text.insert(tk.END, "To begin, tell me a movie you already enjoy from this list:\n\n")
        
        for movie in self.movies_data:
            self.recommendation_text.insert(tk.END, f"  ‚Ä¢ {movie['title']} ({movie['genres']})\n")
        self.recommendation_text.insert(tk.END, "\n" + "="*50 + "\n\n") # A more prominent separator

    def get_recommendations_event(self, event):
        """Event handler for Enter key press."""
        self.get_recommendations_gui()

    def get_recommendations_gui(self):
        """
        Retrieves movie recommendations based on user input from the GUI.
        This version uses simple genre matching.
        """
        user_input_movie = self.movie_entry.get().strip()
        self.recommendation_text.delete(1.0, tk.END) # Clear previous recommendations
        self.movie_entry.delete(0, tk.END) # Clear the input field for next entry

        if not user_input_movie:
            self.recommendation_text.insert(tk.END, "Oops! Looks like you didn't enter anything. ü§î\n"
                                                  "Please type a movie title in the box above.\n")
            self.recommendation_text.insert(tk.END, "\n" + "-"*50 + "\n\n") # Separator
            self.display_available_movies_for_reference()
            return

        # Find the user's selected movie (case-insensitive lookup)
        selected_movie_info = self.movie_titles.get(user_input_movie.lower())

        if not selected_movie_info:
            self.recommendation_text.insert(tk.END, f"Uh-oh! I couldn't find '{user_input_movie}' in my movie collection. üôÅ\n"
                                                  "Could you please check the spelling or pick a title from the list below?\n")
            self.recommendation_text.insert(tk.END, "\n" + "-"*50 + "\n\n") # Separator
            self.display_available_movies_for_reference()
            return

        user_genres = {g.strip() for g in selected_movie_info['genres'].split(',')}
        recommended_movies = []

        for movie in self.movies_data:
            # Skip the movie itself and case-insensitivity check
            if movie['title'].lower() == user_input_movie.lower():
                continue

            movie_genres = {g.strip() for g in movie['genres'].split(',')}

            # Check for common genres
            if user_genres.intersection(movie_genres):
                recommended_movies.append(movie['title'])

        # Display recommendations with a more conversational tone
        if recommended_movies:
            self.recommendation_text.insert(tk.END, f"Excellent choice! You enjoyed '{selected_movie_info['title']}'.\n\n")
            self.recommendation_text.insert(tk.END, "Based on that, here are some other fantastic movies you might love: ‚ú®\n\n")
            # Limit to top 7 recommendations (or fewer if not enough)
            for i, movie_title in enumerate(recommended_movies[:7], 1):
                self.recommendation_text.insert(tk.END, f"  {i}. {movie_title}\n")
            self.recommendation_text.insert(tk.END, "\n" + "="*50 + "\n\n") # Separator
        else:
            self.recommendation_text.insert(tk.END, f"Hmm, I'm having a little trouble finding similar movies to '{selected_movie_info['title']}' with my current data. ü§∑‚Äç‚ôÄÔ∏è\n"
                                                  "Perhaps try a movie with more diverse genres from the list below?\n")
            self.recommendation_text.insert(tk.END, "\n" + "="*50 + "\n\n") # Separator

        self.display_available_movies_for_reference()

    def display_available_movies_for_reference(self):
        """Displays the list of movies available in the dataset for easy reference."""
        self.recommendation_text.insert(tk.END, "\n--- Remember, these are the movies I know about: ---\n\n")
        for movie in self.movies_data:
            self.recommendation_text.insert(tk.END, f"  ‚Ä¢ {movie['title']} ({movie['genres']})\n")
        self.recommendation_text.insert(tk.END, "\n" + "="*50 + "\n") # Separator


if __name__ == "__main__":
    root = tk.Tk()
    app = HumanizedMovieRecommenderGUI(root)
    root.mainloop()
